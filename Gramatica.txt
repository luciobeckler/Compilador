INICIO -> { Gerenciador }

Gerenciador -> INICIO || Gerenciador PalavraReservada Gerenciador || Vazio

PalavraReservada -> "bool" ID '=' PalavraReservada || "int" ID || "float" ID || "true"';' || "true"')' Bloco || "false"';' 
|| "false"')' Bloco || "if"'( FunçãoLogicaDecisão )' || "while" ( FunçãoLogicaDecisão )

FunçãoLogicaDecisão -> "true" || "false" || ID || Numero

IDecisao -> id || id '<' ID || id '>' ID || id '>=' ID

Bloco -> ABRE BLOCO OU FINALIZA COM ;
 


//FAZER A GRAMÁTICA POR PARTES 
- Criação do código
- Atribuição
- ExpressãoMatematica
    -break
- Decisão


FLUXO DA GRAMÁTICA:

INICIO -> { DECLARADOR } // Obrigando o programa a inicializar com declaração, ele pode incializar com while/true e etc

DECLARADOR -> INICIO || Y ||  [ int || float || bool ] indice ; ATRIBUIDOR  || break; //Possivelmente terei que criar uma nova regra que retorne DECLARADOR || break; 



ATRIBUIDOR -> DECLARADOR || ; || Y || indice = IndiceComplemento 
WhileOrIf (Condicional) { DECLARADOR } DECLARADOR 

IndiceComplemento -> indice ; DECLARADOR || [ true || false ] ; DECLARADOR || ExpressãoMatematica ; DECLARADOR

CONDICIONAL -> [ indice || true || false ] || 
ExpressãoMatematica OperadorCondicional ExpressãoMatematica || 
ExpressãoLogica OperadorCondicionalIgualdade ExpressãoLogica


AUXILIARES DA GRAMÁTICA: 

Termo -> numero || indice

TrueOrFalse -> true || false

IdentificadorMatematico -> numero || indice

IdentificadorLogico -> ExpressãoLogica || [ true || false ] || indice || numero

OperadorMatematico -> + || - || * || /
 
EqualOrDiferent -> == || !=

OperadorCondicional -> < || > || <= || >= || == || != 

OperadorCondicionalIgualdade -> == | !=

ExpressãoMatematica -> Termo ExpressãoMatematica" 

ExpressãoMatematica" -> [ + || - || / || * ] Termo ExpressãoMatematica" || Y

Termo -> Fator Termo"

Termo" -> [ + || - || / || * ] Fator Termo" || Y

Fator -> [ numero || indice ] || (ExpressãoMatematica)

ValorCondicionalSimples -> indice || TrueOrFalse

WhileOrIf -> while || if

ExpressãoLogica -> TermoLogico ExpressãoLogica"

ExpressãoLogica" -> [ < || > || <= || >= || == || !=  ] TermoLogico ExpressãoLogica" || Y

TermoLogico -> FatorLogico TermoLogico"

TermoLogico" -> [ < || > || <= || >= || == || !=  ] Fator TermoLogico" || Y

Fator -> [ true || false || indice ] || ( ExpressãoLogica )


