Inicio -> { Gerenciador }

Gerenciador -> Inicio || Gerenciador PalavraReservada Gerenciador || Vazio

PalavraReservada -> "bool" ID '=' PalavraReservada || "int" ID || "float" ID || "true"';' || "true"')' Bloco || "false"';' 
|| "false"')' Bloco || "if"'( FunçãoLogicaDecisão )' || "while" ( FunçãoLogicaDecisão )

FunçãoLogicaDecisão -> "true" || "false" || ID || Numero

IDecisao -> id || id '<' ID || id '>' ID || id '>=' ID

Bloco -> ABRE BLOCO OU FINALIZA COM ;
 


//FAZER A GRAMÁTICA POR PARTES 
- Criação do código
- Atribuição
- ExpressãoMatematica
    -break
- Decisão


FLUXO DA GRAMÁTICA:

Inicio -> { Declarador } // Obrigando o programa a inicializar com declaração, ele pode incializar com while/true e etc

Declarador -> Inicio || Y ||  Tipo indice ; Atribuidor 

Atribuidor -> Declarador || Atribuidor || ; || Y || indice = indice ; Declarador ||  indice = TrueOrFalse ; Declarador || 
indice = ExpressãoMatematica ; Declarador || WhileOrIf (Condicional) { Declarador } Declarador 

Condicional -> ValorCondicionalSimples || ExpressãoMatematica OperadorCondicional ExpressãoMatematica || ExpressãoLogica OperadorCondicionalIgualdade ExpressãoLogica




AUXILIARES DA GRAMÁTICA: 

Tipo -> int || float || bool

Termo -> numero || indice

TrueOrFalse -> true || false

IdentificadorMatematico -> ExpressãoMatematica || numero || indice

IdentificadorLogico -> ExpressãoLogica || TrueOrFalse || indice || numero

OperadorMatematico -> + || - || * || /
 
EqualOrDiferent -> == || !=

OperadorCondicional -> < || > || <= || >= || == || != 

OperadorCondicionalIgualdade -> == | !=

ExpressãoMatematica -> ExpressãoMatematica OperadorMatematico ExpressãoMatematica || ( ExpressãoMatematica ) || IdentificadorMatematico || + ExpressãoMatematica || - ExpressãoMatematica

ValorCondicionalSimples -> indice || TrueOrFalse

WhileOrIf -> while || if

ExpressãoLogica -> (ExpressãoLogica) || IdentificadorLogico || ExpressãoMatematica || ExpressãoLogica OperadorCondicional ExpressãoLogica || OperadorCondicional ExpressãoLogica
