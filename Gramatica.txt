Contruindo análise sintática
para cada simbolo não terminal, um método privado - Parâmetros ArrayList de tokens  retirando simbolos terminais e chamando métodos

Caso não seja contemplado pela linguagem gere um erro e pare o programa.


////////FLUXO DA GRAMÁTICA:////////////////////////////////////////////////////////////

INICIO -> { DECLARADOR } // Obrigando o programa a inicializar com declaração, ele pode incializar com while/true e etc

DECLARADOR -> Y ||  [ int || float || bool ] indice ; DECLARADOR  || ATRIBUIDOR

ATRIBUIDOR -> indice = IndiceComplemento ATRIBUIDOR || [while || if] (ExpressaoLogica) { ATRIBUIDOR } ATRIBUIDOR 

IndiceComplemento -> indice ; ATRIBUIDOR || [ true || false ] ; ATRIBUIDOR || ExpressãoMatematica ; ATRIBUIDOR



/////// AUXILIARES DA GRAMÁTICA: //////////////////////////////////////////////////////////////////

Termo -> numero || indice

IdentificadorMatematico -> numero || indice

Expressao -> Termo [ < || > || <= || >= || == || !=  ] || Termo [ == | != ]

ExpressãoMatematica -> Termo ExpressãoMatematica" 

ExpressãoMatematica" -> [+ || - || * || /] Termo ExpressãoMatematica" || Y

Termo -> Fator Termo"

Termo" -> [+ || - || * || /] Fator Termo" || Y

Fator -> [ numero || indice ] || (ExpressãoMatematica)

ValorCondicionalSimples -> indice || [true || false]

ExpressãoLogica -> [ num || indice || true || false ] [< || > || <= || >= || == || !=] [ num || indice || true || false ]


//Resultado da minha separação de tokens

<nome, valor>

<simbolo,{>
<palavraReservada,int>
<id,i;>
<palavraReservada,int>
<id,j>
<simbolo,;>
<palavraReservada,float>
<id,x>
<simbolo,;>
<palavraReservada,bool>
<id,y>
<simbolo,;>
<id,j>
<simbolo,=>
<numeroInteiro,10>
<simbolo,;>
<id,i>
<simbolo,=>
<numeroInteiro,20>
<simbolo,;>
<id,i>
<simbolo,=>
<id,i>
<simbolo,+>
<id,j>
<simbolo,;>
<id,x>
<simbolo,=>
<simbolo,(>
<id,y>
<simbolo,->
<numeroInteiro,1>
<simbolo,)>
<simbolo,+>
<numeroInteiro,3>
<simbolo,;>
<id,x>
<simbolo,=>
<numeroDecimal,13.8>
<simbolo,;>
<id,y>
<simbolo,=>
<palavraReservada,true>
<palavraReservada,while>
<simbolo,(>
<id,y>
<simbolo,)>
<simbolo,{>
<id,i>
<simbolo,=>
<id,i>
<simbolo,+>
<id,j>
<simbolo,;>
<id,if>
<simbolo,(>
<id,i>
<simbolo,<>
<id,j>
<simbolo,)>
<palavraReservada,break>
<id,k>
<simbolo,;>
<simbolo,}>
<simbolo,}>
<simbolo><{>
<palavraReservada><int>
<id><i;>
<palavraReservada><int>
<id><j>
<simbolo><;>
<palavraReservada><float>
<id><x>
<simbolo><;>
<palavraReservada><bool>
<id><y>
<simbolo><;>
<id><j>
<simbolo><=>
<numeroInteiro><10>
<simbolo><;>
<id><i>
<simbolo><=>
<numeroInteiro><20>
<simbolo><;>
<id><i>
<simbolo><=>
<id><i>
<simbolo><+>
<id><j>
<simbolo><;>
<id><x>
<simbolo><=>
<simbolo><(>
<id><y>
<simbolo><->
<numeroInteiro><1>
<simbolo><)>
<simbolo><+>
<numeroInteiro><3>
<simbolo><;>
<id><x>
<simbolo><=>
<numeroDecimal><13.8>
<simbolo><;>
<id><y>
<simbolo><=>
<palavraReservada><true>
<palavraReservada><while>
<simbolo><(>
<id><y>
<simbolo><)>
<simbolo><{>
<id><i>
<simbolo><=>
<id><i>
<simbolo><+>
<id><j>
<simbolo><;>
<id><if>
<simbolo><(>
<id><i>
<simbolo><<>
<id><j>
<simbolo><)>
<palavraReservada><break>
<id><k>
<simbolo><;>
<simbolo><}>
<simbolo><}>